# pages/1_Text_to_SQL.py
from dotenv import load_dotenv
import streamlit as st
from streamlit_extras.add_vertical_space import add_vertical_space as avs
import google.generativeai as genai
import os
from PIL import Image

# Load environment variables
load_dotenv()

# Configure Gemini with API key
genai.configure(api_key=os.getenv("GOOGLE_API_KEY"))

# Initialize the generative model
model = genai.GenerativeModel('gemini-1.5-flash')

def get_gemini_response(input):
    response = model.generate_content(input)
    return response.text

# Input prompt template
input_prompt_template = """
You are an expert SQL developer that converts natural language queries into precise SQL statements.
Your task is to convert English descriptions into valid, optimized SQL queries.

Guidelines:
1. Identify all relevant tables
2. Select only necessary columns
3. Apply proper filtering conditions
4. Include sorting/grouping when specified
5. Use correct SQL syntax and formatting

Examples:

Example 1:
Input: "Retrieve the names and ages of all employees who are older than 30 years."
Output: 
SQL Query:
SELECT name, age FROM employees
WHERE age > 30;

Example 2:
Input: "Get the total sales amount from the orders table."
Output:
SQL Query:
SELECT SUM(amount) AS total_sales FROM orders;

Example 3:
Input: "Find customers who made purchases in the last month, sorted by purchase date descending."
Output:
SQL Query:
SELECT customer_name FROM purchases
WHERE purchase_date >= DATE_SUB(CURRENT_DATE(), INTERVAL 1 MONTH)
ORDER BY purchase_date DESC;

Example 4:
Input: "Show the average salary by department."
Output:
SQL Query:
SELECT department, AVG(salary) AS avg_salary FROM employees
GROUP BY department;

Now convert this English description to SQL:

Input: {sql_text}

Important Notes:
- Always start with "SQL Query:" on its own line
- Format the query with proper indentation (4 spaces for continuation lines)
- Use standard SQL functions and syntax
- Include column aliases for aggregates
- Correct any typos in the input if necessary
"""

# Page content
st.set_page_config(page_title="Text to SQL Converter", page_icon=":memo:")
st.title("ðŸ§  Text to SQL Converter")

sql_text = st.text_area("Enter your natural language query:",
    placeholder="e.g., Show all customers who purchased more than $100 last month",
    height=150)

submit = st.button("Convert to SQL", type="primary")

if submit and sql_text.strip():
    try:
        prompt = input_prompt_template.format(sql_text=sql_text)
        response = get_gemini_response(prompt)
        with st.expander("Generated SQL Query", expanded=True):
            st.code(response, language="sql")
    except Exception as e:
        st.error(f"An error occurred: {str(e)}")
elif submit:
    st.warning("Please enter a query to convert.")
